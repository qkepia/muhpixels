//-----------------------------------------------------------------------------------------------// 
// Color.h
//-----------------------------------------------------------------------------------------------// 
#ifndef MPX_BASE_COLOR_H
#define MPX_BASE_COLOR_H

#include <Include.h>

namespace mpx {

//-----------------------------------------------------------------------------------------------// 

template<typename T>
struct RGB
{
	T r;
	T g;
	T b;
};

using RGB8 = RGB<uint8_t>;
using RGBf = RGB<float>;

//-----------------------------------------------------------------------------------------------// 

template<typename T>
struct YUV
{
	T y;
	T u;
	T v;
};

using YUV8 = YUV<uint8_t>;
using YUVf = YUV<float>;

//-----------------------------------------------------------------------------------------------// 

MPX_INLINE RGB8 toRGB(YUV8 in)
{
	// 14-bit fixed point precision version
	int y = in.y;
	int u = in.u;
	int v = in.v;
	auto toByte = [](int i) { return uint8_t(((i & 0xFFC00000) == 0) ? (i >> 14) : (i < 0) ? 0 : 255); };
	return { toByte(19077 * y + 26149 * v - 3644112),
			 toByte(19077 * y -  6419 * u - 13320 * v + 2229552),
			 toByte(19077 * y + 33050 * u - 4527440) };
}

//-----------------------------------------------------------------------------------------------// 

MPX_INLINE RGBf toRGB(YUVf in)
{
	float ys = in.y - 16.0f;
	float vs = in.v - 128.0f;
	float us = in.u - 128.0f;

	return { 1.164f * ys + 1.596f * vs, 
			 1.164f * ys - 0.813f * vs - 0.391f * us, 
			 1.164f * ys + 2.018f * us };
}

//-----------------------------------------------------------------------------------------------// 

} // mpx

//-----------------------------------------------------------------------------------------------// 

#endif
